const { Telegraf } = require('telegraf');
const express = require('express');
const http = require('http');
const WebSocket = require('ws');
const path = require('path');

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  console.error("–£–∫–∞–∂–∏ BOT_TOKEN —Å—Ä–µ–¥—ã!");
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

// —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä: gameId ‚Üí { wsClients: [], state }
const games = {};

// –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
app.use(express.static(path.join(__dirname, '../webapp')));

// –∫–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  ctx.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /new, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É");
});

// –∫–æ–º–∞–Ω–¥–∞ /new
bot.command('new', (ctx) => {
  const gameId = String(Date.now());
  games[gameId] = {
    wsClients: [],
    state: {
      x: 200, y: 200,
      vx: 0, vy: 0
    }
  };
  // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –±–æ—Ç + –≤–µ–± —Å–∏–¥—è—Ç –ø–æ–¥ –æ–¥–Ω–∏–º –¥–æ–º–µ–Ω–æ–º
  const url = `${process.env.BASE_URL || ''}/${gameId}`;
  ctx.reply("–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –ø–æ —Å—Å—ã–ª–∫–µ:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "–ò–≥—Ä–∞—Ç—å üé±", web_app: { url } }]
      ]
    }
  });
});

// WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
wss.on('connection', (ws, req) => {
  const url = req.url; // –≤–∏–¥–∞ "/1234567890"
  const gameId = url.slice(1);
  const game = games[gameId];
  if (!game) {
    ws.close();
    return;
  }
  game.wsClients.push(ws);

  ws.on('message', (msg) => {
    try {
      const data = JSON.parse(msg);
      if (data.type === 'move') {
        // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        game.state.vx = data.vx;
        game.state.vy = data.vy;
        // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        game.state.x += data.vx;
        game.state.y += data.vy;
      }
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:", e);
    }
    // —Ä–∞—Å—Å—ã–ª–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const s = JSON.stringify({ type: 'state', state: game.state });
    game.wsClients.forEach(c => {
      if (c.readyState === WebSocket.OPEN) c.send(s);
    });
  });

  ws.on('close', () => {
    game.wsClients = game.wsClients.filter(c => c !== ws);
  });
});

// –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ + —Å–µ—Ä–≤–µ—Ä–∞
bot.launch();
const port = process.env.PORT || 3000;
server.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});
